from functools import wraps
from aiogram.types import Message, CallbackQuery
import asyncio
from typing import Union, Dict
from logs.logging_config import logger

USER_STATES: Dict[int, Dict[str, dict]] = {}


async def _remove_block(user_id: int, section: str, block_delay: int):
    await asyncio.sleep(block_delay)
    if user_id in USER_STATES and section in USER_STATES[user_id]:
        USER_STATES[user_id][section]['blocked'] = False
        logger.debug(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ –¥–ª—è user_id {user_id} –≤ —Ä–∞–∑–¥–µ–ª–µ {section}")


def anti_spam(
        warn_delay=2,  # –í—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Å–µ–∫)
        block_delay=5,  # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ —Å–ø–∞–º–∞ (—Å–µ–∫)
        message_text="üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ!",
        section="global"  # –ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
):
    def decorator(func):
        @wraps(func)
        async def wrapper(obj: Union[Message, CallbackQuery], *args, **kwargs):
            user_id = obj.from_user.id

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if user_id not in USER_STATES:
                USER_STATES[user_id] = {}
            if section not in USER_STATES[user_id]:
                USER_STATES[user_id][section] = {
                    'last_request': asyncio.get_event_loop().time() - warn_delay,
                    'blocked': False
                }

            state = USER_STATES[user_id][section]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if state['blocked']:
                return None  # –ü–æ–ª–Ω—ã–π –∏–≥–Ω–æ—Ä –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ

            current_time = asyncio.get_event_loop().time()
            time_since_last = current_time - state['last_request']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if time_since_last < warn_delay:
                # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if isinstance(obj, CallbackQuery):
                    await obj.answer(message_text, show_alert=True)
                else:
                    await obj.answer(message_text)

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                state['blocked'] = True
                asyncio.create_task(_remove_block(user_id, section, block_delay))
                return None

            # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            state['last_request'] = current_time

            try:
                return await func(obj, *args, **kwargs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
                raise

        return wrapper

    return decorator