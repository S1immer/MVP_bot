import asyncio

from data.loader import bot

from database.DB_CONN_async import Session_db
from database.models_sql_async import Keys
from database.functions_db_async import get_data_for_delet_client, delete_user_db_on_server, delete_user_sub_db

from logs.admin_notify import notify_admin
from logs.logging_config import logger

from api_3xui.client import delete_client
from api_3xui.authorize import login_with_credentials

from sqlalchemy import select
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


# ==================== –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–¢–ï–†–í–ê–õ–û–í –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

NOTIFY_BEFORE_2_DAYS = timedelta(days=2)
NOTIFY_BEFORE_1_DAY = timedelta(days=1)
NOTIFY_BEFORE_12_HOURS = timedelta(hours=12)
NOTIFY_BEFORE_1_HOUR = timedelta(hours=1)

NOTIFY_AFTER_1_DAY = timedelta(days=1)
NOTIFY_AFTER_2_DAYS = timedelta(days=2)

DELETE_AFTER = timedelta(days=3)
CHECK_INTERVAL = timedelta(minutes=15)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–ö–°–¢–û–í –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

MESSAGE_2_DAYS = "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 –¥–Ω—è.\n‚ùóÔ∏è –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ."
MESSAGE_1_DAY = "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.\n‚ùóÔ∏è –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ."
MESSAGE_12_HOURS = "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤.\n‚ùóÔ∏è –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ."
MESSAGE_1_HOUR = "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.\n‚ùóÔ∏è –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ."

MESSAGE_EXPIRED = "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n‚ùóÔ∏è –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É."
MESSAGE_REMINDER_DAY1 = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥.\n‚ùóÔ∏è –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ 2 –¥–Ω—è –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞."
MESSAGE_REMINDER_DAY2 = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ 2 –¥–Ω—è –Ω–∞–∑–∞–¥.\n‚ùóÔ∏è –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∏–Ω–∞—á–µ –∑–∞–≤—Ç—Ä–∞ –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞."

MESSAGE_DELETED = "üõë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞ 3 –¥–Ω—è –Ω–∞–∑–∞–¥."


# ==================== –ö–ù–û–ü–ö–ê –î–õ–Ø –ü–†–û–î–õ–ï–ù–ò–Ø ====================

renew_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscribe")]
    ]
)

# ==================== –§–£–ù–ö–¶–ò–ò ====================

async def send_message_to_user(telegram_id: int, message: str):
    try:
            await bot.send_message(telegram_id, message, reply_markup=renew_button)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        await notify_admin(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")


async def check_and_notify_expired_subscriptions():
    async with Session_db() as session:
        now = datetime.now()

        result = await session.execute(
            select(Keys).where(Keys.deleted_at.is_not(None))
        )
        users = result.scalars().all()

        for user in users:
            if not user.deleted_at:
                continue

            telegram_id = user.telegram_id
            time_remaining = user.deleted_at - now
            last_notification = user.last_notification_sent

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            notify_intervals = [
                (NOTIFY_BEFORE_2_DAYS, MESSAGE_2_DAYS),
                (NOTIFY_BEFORE_1_DAY, MESSAGE_1_DAY),
                (NOTIFY_BEFORE_12_HOURS, MESSAGE_12_HOURS),
                (NOTIFY_BEFORE_1_HOUR, MESSAGE_1_HOUR)
            ]

            notification_sent = False

            for interval, message_text in notify_intervals:
                if timedelta(seconds=0) < time_remaining <= interval:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    if not last_notification or last_notification < user.deleted_at - interval:
                        try:
                            await send_message_to_user(telegram_id, message_text)
                            user.last_notification_sent = now
                            await session.commit()
                            notification_sent = True
                            break
                        except Exception as e:
                            logger.error(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
            if time_remaining <= timedelta(seconds=0):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                if (not last_notification or last_notification < user.deleted_at) and not notification_sent:
                    try:
                        await send_message_to_user(telegram_id, MESSAGE_EXPIRED)
                        user.last_notification_sent = now
                        await session.commit()
                    except Exception as e:
                        logger.error(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            if time_remaining <= timedelta(seconds=0):
                time_since_expired = now - user.deleted_at

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ 1 –∏ 2 –¥–Ω—è)
                reminder_intervals = [
                    (NOTIFY_AFTER_1_DAY, MESSAGE_REMINDER_DAY1),
                    (NOTIFY_AFTER_2_DAYS, MESSAGE_REMINDER_DAY2)
                ]

                for interval, message_text in reminder_intervals:
                    if time_since_expired >= interval:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                        if not last_notification or last_notification < user.deleted_at + interval:
                            try:
                                await send_message_to_user(telegram_id, message_text)
                                user.last_notification_sent = now
                                await session.commit()
                                logger.info(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            except Exception as e:
                                logger.error(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            if user.deleted_at <= now:  # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞
                time_since_expired = now - user.deleted_at
                if time_since_expired >= DELETE_AFTER:  # –ò—Å—Ç–µ–∫–ª–∞ –±–æ–ª–µ–µ N –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∑–∞–¥
                    data_for_delete = await get_data_for_delet_client(telegram_id)

                    if data_for_delete:
                        server_id, client_uuid, ip_limit = data_for_delete
                        session_3x_ui = None
                        try:
                            session_3x_ui = await login_with_credentials(server_name=server_id)
                            if not session_3x_ui:
                                logger.error(text=f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {telegram_id} —Å —Å–µ—Ä–≤–µ—Ä–∞ '
                                                        f'[{server_id}] –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!')
                                await notify_admin(text=f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {telegram_id} —Å —Å–µ—Ä–≤–µ—Ä–∞ '
                                                        f'[{server_id}] –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!')
                                return
                            deletion_result = await delete_client(session_3x_ui, server_id, client_uuid)

                            if deletion_result:
                                await delete_user_db_on_server(
                                    quantity_users=ip_limit,
                                    server_name=server_id,
                                    telegram_id=telegram_id
                                )
                                await delete_user_sub_db(telegram_id)

                                await send_message_to_user(telegram_id, MESSAGE_DELETED)
                                logger.info(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")

                            else:
                                logger.error(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                                await notify_admin(
                                    f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ [{server_id}] "
                                    f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}."
                                )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                            await notify_admin(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}, –æ—à–∏–±–∫–∞: {e}")
                        finally:
                            if session_3x_ui:
                                await session_3x_ui.close()
                    else:
                        logger.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                        await notify_admin(
                            f"–°—Ä–∞–±–æ—Ç–∞–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {telegram_id}, "
                            f"–Ω–æ –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n"
                            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!"
                        )


async def start_subscription_checker():
    try:
        scheduler = AsyncIOScheduler()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        scheduler.add_job(
            check_and_notify_expired_subscriptions,
            trigger='interval',
            minutes=CHECK_INTERVAL.total_seconds() / 60
        )
        scheduler.start()

        logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL})")

        while True:
            await asyncio.sleep(1)

    except Exception as e:
        error_text = f"‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:\n{e}"
        logger.error(error_text)

        try:
            await notify_admin(text=error_text)
        except Exception as notify_exc:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {notify_exc}")


if __name__ == "__main__":
    asyncio.run(start_subscription_checker())

