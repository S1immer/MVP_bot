import asyncio

from data.loader import bot

from database.DB_CONN_async import Session_db
from database.models_sql_async import Keys
from database.functions_db_async import get_data_for_delet_client, delete_user_db_on_server, delete_user_sub_db

from logs.admin_notify import notify_admin
from logs.logging_config import logger

from api_3xui.client import delete_client
from api_3xui.authorize import login_with_credentials

from sqlalchemy import select
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from contextlib import suppress


# ==================== –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–¢–ï–†–í–ê–õ–û–í –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================
TEST_MODE = False
if TEST_MODE:
    NOTIFY_BEFORE_2_DAYS = timedelta(seconds=50)  # ‚Üí –ß–µ—Ä–µ–∑ 30 —Å–µ–∫
    NOTIFY_BEFORE_1_DAY = timedelta(seconds=39)  # ‚Üí –ß–µ—Ä–µ–∑ 25 —Å–µ–∫
    NOTIFY_BEFORE_12_HOURS = timedelta(seconds=28)  # ‚Üí –ß–µ—Ä–µ–∑ 20 —Å–µ–∫
    NOTIFY_BEFORE_1_HOUR = timedelta(seconds=17)  # ‚Üí –ß–µ—Ä–µ–∑ 15 —Å–µ–∫

    NOTIFY_AFTER_1_DAY = timedelta(seconds=20)  # ‚Üí –ß–µ—Ä–µ–∑ 30 —Å–µ–∫ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    NOTIFY_AFTER_2_DAYS = timedelta(seconds=33)  # ‚Üí –ß–µ—Ä–µ–∑ 40 —Å–µ–∫ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è

    DELETE_AFTER = timedelta(seconds=47)  # ‚Üí –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 45 —Å–µ–∫ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ú–ï–ù–¨–®–ï —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!
    CHECK_INTERVAL = timedelta(seconds=10)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

else:
    NOTIFY_BEFORE_2_DAYS = timedelta(days=2)
    NOTIFY_BEFORE_1_DAY = timedelta(days=1)
    NOTIFY_BEFORE_12_HOURS = timedelta(hours=12)
    NOTIFY_BEFORE_1_HOUR = timedelta(hours=1)

    NOTIFY_AFTER_1_DAY = timedelta(days=1)
    NOTIFY_AFTER_2_DAYS = timedelta(days=2)

    DELETE_AFTER = timedelta(days=3)
    CHECK_INTERVAL = timedelta(minutes=15)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–ö–°–¢–û–í –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

MESSAGE_2_DAYS = "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 –¥–Ω—è.\n‚ùóÔ∏è –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ."
MESSAGE_1_DAY = "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.\n‚ùóÔ∏è –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ."
MESSAGE_12_HOURS = "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤.\n‚ùóÔ∏è –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ."
MESSAGE_1_HOUR = "üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å.\n‚ùóÔ∏è –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ."

MESSAGE_EXPIRED = "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n‚ùóÔ∏è –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É."
MESSAGE_REMINDER_DAY1 = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥.\n‚ùóÔ∏è –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ 2 –¥–Ω—è –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞."
MESSAGE_REMINDER_DAY2 = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ 2 –¥–Ω—è –Ω–∞–∑–∞–¥.\n‚ùóÔ∏è –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∏–Ω–∞—á–µ –∑–∞–≤—Ç—Ä–∞ –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞."

MESSAGE_DELETED = "üõë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞ 3 –¥–Ω—è –Ω–∞–∑–∞–¥."


# ==================== –ö–ù–û–ü–ö–ê –î–õ–Ø –ü–†–û–î–õ–ï–ù–ò–Ø ====================

renew_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscribe")]
    ]
)

# ==================== –§–£–ù–ö–¶–ò–ò ====================

async def send_message_to_user(telegram_id: int, message: str):
    try:
        await bot.send_message(telegram_id, message, reply_markup=renew_button)
        logger.info(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
    except Exception as e:
        logger.error(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        await notify_admin(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")


async def delete_user_data(telegram_id: int, server_id: str, client_uuid: str, ip_limit: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    session_3x_ui = None
    try:
        session_3x_ui = await login_with_credentials(server_name=server_id)
        if not session_3x_ui:
            error_msg = f'[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}'
            logger.error(error_msg)
            await notify_admin(error_msg)
            return False

        deletion_result = await delete_client(session_3x_ui, server_id, client_uuid)

        if deletion_result:
            await delete_user_db_on_server(
                quantity_users=ip_limit,
                server_name=server_id,
                telegram_id=telegram_id
            )
            await delete_user_sub_db(telegram_id)

            await send_message_to_user(telegram_id, MESSAGE_DELETED)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return True
        else:
            error_msg = f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}"
            logger.error(error_msg)
            await notify_admin(error_msg)
            return False

    except Exception as e:
        error_msg = f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}"
        logger.error(error_msg)
        await notify_admin(error_msg)
        return False
    finally:
        if session_3x_ui:
            with suppress(Exception):
                await session_3x_ui.close()


async def check_and_notify_expired_subscriptions():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    start_time = datetime.now()
    processed_users = 0
    notifications_sent = 0
    errors_count = 0

    try:
        logger.info("[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è] üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...")
        async with (Session_db() as session):
            now = datetime.now()

            result = await session.execute(
                select(Keys).where(Keys.deleted_at.is_not(None))
            )
            users = result.scalars().all()
            processed_users = len(users)

            for user in users:
                try:
                    if not user.deleted_at:
                        continue

                    telegram_id = user.telegram_id
                    time_remaining = user.deleted_at - now
                    last_notification = user.last_notification_sent

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                    notify_intervals =[
                        (NOTIFY_BEFORE_2_DAYS, MESSAGE_2_DAYS),
                        (NOTIFY_BEFORE_1_DAY, MESSAGE_1_DAY),
                        (NOTIFY_BEFORE_12_HOURS, MESSAGE_12_HOURS),
                        (NOTIFY_BEFORE_1_HOUR, MESSAGE_1_HOUR)
                    ]

                    notification_sent = False

                    for interval, message_text in notify_intervals:
                        if timedelta(seconds=0) < time_remaining <= interval:
                            if not last_notification or last_notification < user.deleted_at - interval:
                                await send_message_to_user(telegram_id, message_text)
                                user.last_notification_sent = now
                                await session.commit()
                                notification_sent = True
                                notifications_sent += 1

                                break

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    if time_remaining <= timedelta(seconds=0):
                        if (not last_notification or last_notification < user.deleted_at) and not notification_sent:
                            await send_message_to_user(telegram_id, MESSAGE_EXPIRED)
                            user.last_notification_sent = now
                            await session.commit()
                            notifications_sent += 1

                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    if time_remaining <= timedelta(seconds=0):
                        time_since_expired = now - user.deleted_at

                        reminder_intervals = [
                            (NOTIFY_AFTER_1_DAY, MESSAGE_REMINDER_DAY1),
                            (NOTIFY_AFTER_2_DAYS, MESSAGE_REMINDER_DAY2)
                        ]

                        for interval, message_text in reminder_intervals:
                            if time_since_expired >= interval:
                                if not last_notification or last_notification < user.deleted_at + interval:
                                    await send_message_to_user(telegram_id, message_text)
                                    user.last_notification_sent = now
                                    await session.commit()
                                    notifications_sent += 1

                                    break

                    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    if user.deleted_at <= now:
                        time_since_expired = now - user.deleted_at
                        if time_since_expired >= DELETE_AFTER:
                            data_for_delete = await get_data_for_delet_client(telegram_id)

                            if data_for_delete:
                                server_id, client_uuid, ip_limit = data_for_delete
                                await delete_user_data(telegram_id, server_id, client_uuid, ip_limit)
                            else:
                                error_msg = f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}"
                                logger.error(error_msg)
                                await notify_admin(error_msg)

                except Exception as e:
                    errors_count += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id if user else 'Unknown'}: {e}")
                    continue

        duration = (datetime.now() - start_time).total_seconds()

        if notifications_sent > 0:
            logger.info(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            logger.info(f"‚è± –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫")
            logger.info(f"üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {processed_users}")
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_sent}")
            logger.info(f"‚ùå –û—à–∏–±–æ–∫: {errors_count}")
        else:
            logger.info(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç. "
                        f"–í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {processed_users}")

    except Exception as e:
        error_message = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)[:200]}"
        logger.error(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è] üö® {error_message}")
        await notify_admin(error_message)


async def start_subscription_checker():
    try:
        scheduler = AsyncIOScheduler()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        scheduler.add_job(
            check_and_notify_expired_subscriptions,
            trigger='interval',
            minutes=CHECK_INTERVAL.total_seconds() / 60
        )
        scheduler.start()

        logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL})")

    except Exception as e:
        error_text = f"‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:\n{e}"
        logger.error(error_text)
        await notify_admin(text=error_text)


async def init_subscription_notifier():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ main.py"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await check_and_notify_expired_subscriptions()
        logger.info("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

if __name__ == "__main__":
    asyncio.run(start_subscription_checker())

