from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from data.config import admins
from database.functions_db_async import get_data_for_delet_client
from api_3xui.Update_time_key import extend_time_key
from logs.logging_config import logger
from logs.admin_notify import notify_admin
from datetime import datetime, timedelta
from data.loader import bot

router = Router()

class ExtendSubscriptionFSM(StatesGroup):
    waiting_for_days = State()
    waiting_for_user_id = State()
    waiting_for_confirmation = State()

@router.callback_query(F.data == "admin_extend_sub")
async def start_extend_subscription(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in admins:
        await callback.answer(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await state.set_state(ExtendSubscriptionFSM.waiting_for_days)
    await callback.message.answer("üìÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:")
    await callback.answer()

@router.message(ExtendSubscriptionFSM.waiting_for_days)
async def process_days_for_extend(message: Message, state: FSMContext):
    if message.from_user.id not in admins:
        return
    
    try:
        days = int(message.text.strip())
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        if days > 365:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π - 365. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(extension_days=days)
    await state.set_state(ExtendSubscriptionFSM.waiting_for_user_id)
    
    await message.answer(
        text=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: `{days}`\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
        parse_mode="Markdown"
    )

@router.message(ExtendSubscriptionFSM.waiting_for_user_id)
async def process_user_id_for_extend(message: Message, state: FSMContext):
    if message.from_user.id not in admins:
        return
    
    try:
        user_id = int(message.text.strip())
        if user_id <= 0:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    extension_days = data['extension_days']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    user_data = await get_user_data_for_extend(user_id)
    if not user_data:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )
        return
    
    server_id, client_uuid, ip_limit = user_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(
        target_user_id=user_id,
        server_id=server_id,
        client_uuid=client_uuid,
        ip_limit=ip_limit
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    summary_text = (
        f"üìã –°–≤–æ–¥–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
        f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: `{server_id}`\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: `{ip_limit}`\n"
        f"üìÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞: `{extension_days}` –¥–Ω–µ–π\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏?"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–¥–ª–∏—Ç—å", callback_data="confirm_extend")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_extend")]
    ])
    
    await message.answer(summary_text, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(ExtendSubscriptionFSM.waiting_for_confirmation)

@router.callback_query(F.data == "confirm_extend")
async def confirm_extend_subscription(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in admins:
        await callback.answer(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = data['target_user_id']
    server_id = data['server_id']
    client_uuid = data['client_uuid']
    ip_limit = data['ip_limit']
    extension_days = data['extension_days']
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ client_uuid
    if not client_uuid or client_uuid.strip() == "":
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π client_uuid –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        logger.error(f"[extend_subscription] –ü—É—Å—Ç–æ–π client_uuid –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await state.clear()
        return


    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    status_msg = await callback.message.edit_text("‚è≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ë–î
        from database.functions_db_async import get_date_user
        
        current_subscription_data = await get_date_user(user_id)
        if not current_subscription_data:
            await status_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
            logger.error(f"[extend_subscription] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await state.clear()
            return
        
        created_at, deleted_at = current_subscription_data
        
        if not deleted_at:
            await status_msg.edit_text(
                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
            )
            logger.error(f"[extend_subscription] –ù–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await state.clear()
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
        current_time = datetime.now()
        remaining_days = (deleted_at - current_time).days
        
        if remaining_days < 0:
            # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            new_expiry_time = current_time + timedelta(days=extension_days)
            logger.info(f"[extend_subscription] –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        else:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ—Å—Ç–∞–≤—à–∏–º—Å—è –¥–Ω—è–º
            new_expiry_time = deleted_at + timedelta(days=extension_days)
            logger.info(f"[extend_subscription] –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏: {remaining_days}, –¥–æ–±–∞–≤–ª—è–µ–º {extension_days} –¥–Ω–µ–π")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UNIX timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        expiry_timestamp = int(new_expiry_time.timestamp() * 1000)
        
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        extend_result = await extend_time_key(
            telegram_id=user_id,
            server_id_name=server_id,
            client_uuid=client_uuid,
            limit_ip=ip_limit + 1,  # +1 —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            expiry_time=expiry_timestamp
        )
        
        if extend_result:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            from database.functions_db_async import update_subscription_expiry_time
            
            update_result = await update_subscription_expiry_time(user_id, new_expiry_time)
            
            if update_result:
                if remaining_days >= 0:
                    success_text = (
                        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
                        f"üìÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞: `{extension_days}` –¥–Ω–µ–π\n"
                        f"‚è∞ –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏: `{remaining_days}` –¥–Ω–µ–π\n"
                        f"üïê –ù–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: `{new_expiry_time.strftime('%d.%m.%Y %H:%M')}`\n"
                        f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: `{server_id}`\n"
                        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: `{ip_limit}`\n\n"
                        f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                    )
                else:
                    success_text = (
                        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
                        f"üìÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞: `{extension_days}` –¥–Ω–µ–π\n"
                        f"‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –∏—Å—Ç–µ–∫—à–µ–π\n"
                        f"üïê –ù–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: `{new_expiry_time.strftime('%d.%m.%Y %H:%M')}`\n"
                        f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: `{server_id}`\n"
                        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: `{ip_limit}`\n\n"
                        f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                    )
                
                await status_msg.edit_text(success_text, parse_mode="Markdown")
                logger.info(f"[extend_subscription] –ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {extension_days} –¥–Ω–µ–π")
                await notify_admin(f"‚úÖ –ê–¥–º–∏–Ω {callback.from_user.id} –ø—Ä–æ–¥–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {extension_days} –¥–Ω–µ–π")
                try:
                    user_message = (
                        f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                        f"üìÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞: {extension_days} –¥–Ω–µ–π\n"
                        f"üïê –ù–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {new_expiry_time.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üì± –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ip_limit}\n\n"
                        f"‚ú® –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! ‚ú®"
                    )
                    await bot.send_message(chat_id=user_id, text=user_message)
                    logger.info(f"[extend_subscription] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                except Exception as e:
                    logger.error(f"[extend_subscription] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
            else:
                # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –Ω–µ —É–¥–∞–ª–æ—Å—å
                warning_text = (
                    f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
                    f"üìÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞: `{extension_days}` –¥–Ω–µ–π\n"
                    f"üïê –ù–æ–≤–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ: `{new_expiry_time.strftime('%d.%m.%Y %H:%M')}`\n"
                    f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: `{server_id}`\n"
                    f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: `{ip_limit}`\n\n"
                    f"‚ùå –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î"
                )
                
                await status_msg.edit_text(warning_text, parse_mode="Markdown")
                logger.warning(f"[extend_subscription] –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –ë–î –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await notify_admin(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –ë–î –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            error_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}` –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
            await status_msg.edit_text(error_text, parse_mode="Markdown")
            logger.error(f"[extend_subscription] –ê–¥–º–∏–Ω {callback.from_user.id} –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await notify_admin(f"‚ùå –ê–¥–º–∏–Ω {callback.from_user.id} –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    except Exception as e:
        error_text = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}"
        await status_msg.edit_text(error_text)
        logger.error(f"[extend_subscription] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await notify_admin(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    finally:
        await state.clear()

@router.callback_query(F.data == "cancel_extend")
async def cancel_extend_subscription(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in admins:
        await callback.answer(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    await callback.message.edit_text("‚ùå –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

async def get_user_data_for_extend(telegram_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (server_id, client_uuid, ip_limit) –∏–ª–∏ None
    """
    try:
        user_data = await get_data_for_delet_client(telegram_id)
        if user_data:
            server_id, client_uuid, ip_limit = user_data
            return server_id, client_uuid, ip_limit
        return None
    except Exception as e:
        logger.error(f"[get_user_data_for_extend] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None
