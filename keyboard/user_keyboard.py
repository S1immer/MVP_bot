import asyncio
import uuid

from api_3xui.Update_time_key import extend_time_key
from api_3xui.authorize import login_with_credentials, link, get_clients
from api_3xui.client import delete_client, add_user
from data.loader import Bot

from aiogram import Router, F
from aiogram.types import KeyboardButton, InlineKeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext

from api_3xui.tariff_key_generator import key_generation
from api_3xui.trial_key import create_trial_key

from handlers.states import SubscriptionState

from payment.yookassa.yookassa_function import  create_payment, check_payment_status

from data_servers.tariffs import tariffs_data

from database.functions_db_async import *

from datetime import datetime, timedelta




router = Router()



# -----------------------------------
# üîπ –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†
# -----------------------------------


async def main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard)."""
    keyboard_layout = [
        [KeyboardButton(text='üìÜ–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π'), KeyboardButton(text='‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ üîë –ö–ª—é—á')],
        [KeyboardButton(text='üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'), KeyboardButton(text='üåç–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä')],
        #KeyboardButton(text='ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')], #KeyboardButton(text='üéÅ –ü—Ä–æ–º–æ–∫–æ–¥')],
        [KeyboardButton(text='üÜò –ü–æ–º–æ—â—å')],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard_layout, resize_keyboard=True)


async def trial_button() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='üéÅ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥', callback_data='trial')]]
    )


async def inline_server_change() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üá©üá™–ì–µ—Ä–º–∞–Ω–∏—è", callback_data='serverchange_germany')],
            [InlineKeyboardButton(text="üá≥üá±–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", callback_data='serverchange_netherlands')]
        ]
    )


async def choice_of_payment_system() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –Æ–ö–∞—Å—Å–∞", callback_data='pay_yookassa')],
            [InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data='pay_telegram_stars')]
        ]
    )


async def inline_price() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üî• 1 –º–µ—Å—è—Ü', callback_data='month')],
            [InlineKeyboardButton(text='üî• 3 –º–µ—Å—è—Ü–∞', callback_data='three_months')],
            [InlineKeyboardButton(text='üî• 6 –º–µ—Å—è—Ü–µ–≤', callback_data='six_months')],
            [InlineKeyboardButton(text='üî• 12 –º–µ—Å—è—Ü–µ–≤', callback_data='year')],
        ]
    )


async def inline_device() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –∫–æ–ª-–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='üî•1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', callback_data='1_devices')],
                [InlineKeyboardButton(text='üî•2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', callback_data='2_devices')],
                [InlineKeyboardButton(text='üî•3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', callback_data='3_devices')],
                [InlineKeyboardButton(text='üî•5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data='5_devices')]
            ]
        )


async def inline_check_payment(payment_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_payment_{payment_id}')]
        ]
    )


async def choosing_a_device() -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üçèiPhone', callback_data='iphone')],
            [InlineKeyboardButton(text='ü§ñAndroid', callback_data='android')],
            [InlineKeyboardButton(text='üñ•Windows', callback_data='windows')],
            [InlineKeyboardButton(text='üíªMacOS', callback_data='macos')]
        ]
    )


# ============================================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ============================================


async def background_check_payment(bot: Bot, telegram_id: int, payment_id: str, path: str, state: FSMContext, **kwargs):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ yookassa.,
    path - —Å—Ç—Ä–æ–∫–∞: "no_subscription", "expired", "active"
    kwargs - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω—É–∂–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø—É—Ç–∏
    """
    for _ in range(120):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 5 –º–∏–Ω—É—Ç (10 * 30—Å–µ–∫)
        status = await check_payment_status(payment_id)
        if status == "succeeded":
            try:
                if path == "no_subscription":
                    path_for_db = "new_sub"
                    data = await state.get_data()
                    get_period = data.get('tariff')  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'month'
                    get_device = data.get('limit_ip_int')  # –Ω–∞–ø—Ä–∏–º–µ—Ä, '1_devices'

                    if not get_period or not get_device:
                        await bot.send_message(telegram_id, text="‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞.")
                        return None

                    if get_period not in tariffs_data or get_device not in tariffs_data[get_period]:
                        await bot.send_message(telegram_id, text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞.")
                        return None


                    result = await key_generation(telegram_id, period=get_period, devices=get_device)
                    if result is None:
                        await bot.send_message(telegram_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
                                                             f"–í–∞—à –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ - {get_period} –¥–Ω–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:{get_device}.\n"
                                                             f"id –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")
                        return None

                    link_data, server_id, tariff_days, device, client_uuid = result

                    await bot.send_message(
                        telegram_id,
                        text=f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!\n"
                             f"‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {tariff_days} –¥–Ω–µ–π, —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device}.\n\n"
                             f"üîë –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n", parse_mode="HTML"
                    )
                    await bot.send_message(telegram_id, text=f"<pre>{link_data}</pre>", parse_mode="HTML")
                    await bot.send_message(telegram_id, text="üìå –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á:",
                                           reply_markup=await choosing_a_device())
                    await bot.send_message(telegram_id, text=f"‚ö†Ô∏è<b>–ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.</b> –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ "
                             f"–æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π!\n", parse_mode='HTML')

                    expiry_time_tariff = datetime.now() + timedelta(days=tariff_days)
                    await save_key_to_database(telegram_id=telegram_id,
                                               client_uuid=client_uuid,
                                               active_key=link_data,
                                               ip_limit=device,
                                               server_id=server_id,
                                               expiry_time=expiry_time_tariff
                                               )

                    created_pay = datetime.now()
                    await save_payment_id_to_database(telegram_id, payment_id, created_pay, path_for_db, device, tariff_days)
                    await add_user_db_on_server(device, server_id, telegram_id)


                elif path == "expired":
                    path_for_db = "sub_extension"
                    data = await state.get_data()
                    get_period = data.get('tariff')
                    get_device = data.get('limit_ip_int')

                    user_data_for_extend = await get_user_data_for_extend(telegram_id)
                    if user_data_for_extend:
                        server_id, client_uuid, ip_limit = user_data_for_extend
                    else:
                        await bot.send_message(telegram_id, text=f"[background_check_payment] –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                        return None

                    tariff_data = tariffs_data[get_period][f"{get_device}_devices"]
                    tariff_days = tariff_data['days']
                    current_time = datetime.now()
                    expiry_time = current_time + timedelta(days=tariff_days)
                    expiry_timestamp = int(expiry_time.timestamp() * 1000)

                    result_extend = await extend_time_key(
                        telegram_id=telegram_id,
                        server_id_name=server_id,
                        client_uuid=client_uuid,
                        limit_ip=ip_limit+1, # +1 —á—Ç–æ–±—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è –∫–ª—é—á
                        expiry_time=expiry_timestamp
                    )
                    if result_extend:
                        new_created = datetime.now()
                        new_deleted = new_created + timedelta(tariff_days)
                        await save_the_new_subscription_time_for_extension(telegram_id, new_created, new_deleted)
                        await save_payment_id_to_database(telegram_id, payment_id, new_created, path_for_db, ip_limit, tariff_days)
                        await bot.send_message(telegram_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!\n"
                                                             f"‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {tariff_days} –¥–Ω–µ–π!")
                    else:
                        await bot.send_message(telegram_id,
                                               text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
                                                    f"–¢–∞—Ä–∏—Ñ –ø—Ä–æ–¥–ª–µ–Ω–∏—è - {tariff_days} –¥–Ω–µ–π, –∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ip_limit} ")


                elif path == "active":
                    action = kwargs.get("action")  # –Ω–∞–ø—Ä–∏–º–µ—Ä "extension" –∏–ª–∏ "change_devices"
                    if action == "active_extend":

                        path_for_db = 'active_extension'
                        data = await state.get_data()
                        get_period = data.get('tariff')
                        get_device = data.get('limit_ip_int')
                        device_limit = f"{get_device}_devices"

                        if not get_period or not device_limit:
                            await bot.send_message(telegram_id,
                                                   text="‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                            return None

                        if get_period not in tariffs_data or device_limit not in tariffs_data[get_period]:
                            await bot.send_message(telegram_id,
                                                   text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–∏—Ñ–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                            return None

                        days = tariffs_data[get_period][device_limit]['days']


                        data_time_sub = await get_date_user(telegram_id)
                        created_at, deleted_at = data_time_sub
                        remaining_days_sub = deleted_at - datetime.now()
                        total_extension = remaining_days_sub + timedelta(days=days)
                        new_deleted = datetime.now() + total_extension


                        user_data_for_extend = await get_user_data_for_extend(telegram_id)
                        if user_data_for_extend:
                            server_id, client_uuid, ip_limit = user_data_for_extend
                        else:
                            await bot.send_message(telegram_id,
                                                   text=f"[background_check_payment] –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
                            return None

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ timestamp –≤ –º—Å
                        expiry_timestamp = int(new_deleted.timestamp() * 1000)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                        result_extend = await extend_time_key(
                            telegram_id=telegram_id,
                            server_id_name=server_id,
                            client_uuid=client_uuid,
                            limit_ip=ip_limit+1, # +1 —á—Ç–æ–±—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è –∫–ª—é—á
                            expiry_time=expiry_timestamp
                        )

                        if result_extend:
                            new_created = datetime.now()
                            print(f"new_created - {new_created}")
                            print(f"new_deleted - {new_deleted}")
                            await save_the_new_subscription_time_for_extension(telegram_id, new_created, new_deleted)
                            await save_payment_id_to_database(telegram_id, payment_id, new_created, path_for_db, ip_limit, days)
                            print(f"payment_data - {path_for_db}")
                            await bot.send_message(telegram_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!\n"
                                                                     f"‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!")


                    elif action == "active_change_devices":

                        path_for_db = 'active_change_devices'
                        data = await state.get_data()
                        added_devices = data.get('added_devices') # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–≤—ã–±—Ä–∞–Ω–Ω–æ–µ - —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ) = –∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
                        get_device = data.get('limit_ip_int')
                        if not get_device:
                            await bot.send_message(telegram_id,
                                                   text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
                            return None

                        user_data = await get_user_data_for_extend(telegram_id)
                        if not user_data:
                            await bot.send_message(telegram_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                            return None

                        server_id, client_uuid, ip_limit = user_data

                        subscription = await get_date_user(telegram_id)
                        if not subscription:
                            await bot.send_message(telegram_id, text="‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                            return None

                        _, deleted_at = subscription
                        if not deleted_at:
                            await bot.send_message(telegram_id, text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
                            return None

                        expiry_timestamp = int(deleted_at.timestamp() * 1000)

                        result_extend = await extend_time_key(
                            telegram_id=telegram_id,
                            server_id_name=server_id,
                            client_uuid=client_uuid,
                            limit_ip=get_device + 1,
                            expiry_time=expiry_timestamp
                        )

                        if result_extend:
                            await save_ip_limit(telegram_id, get_device)
                            await add_user_db_on_server(added_devices, server_id, telegram_id)

                            await save_payment_id_to_database(
                                telegram_id=telegram_id,
                                payment_id=payment_id,
                                created_pay=datetime.now(),
                                payment_data=path_for_db,
                                limit_device=get_device,
                                tariff_days=(deleted_at - datetime.now()).days
                            )

                            await bot.send_message(
                                telegram_id,
                                text=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {get_device}.\n"
                                     f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤—Å—ë —Ç–∞–∫ –∂–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {deleted_at.date()}."
                            )
                            await state.clear()
                        else:
                            await bot.send_message(telegram_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")

                else:
                    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                    await bot.send_message(telegram_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
            break

        await asyncio.sleep(10)
    else:
        # –ï—Å–ª–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã –Ω–µ—Ç
        try:
            await bot.send_message(
                telegram_id,
                text="‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")



# ============================================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É—Ç–∏ "no_subscription"
# ============================================

# 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(SubscriptionState.no_sub_choose_tariff, F.data.in_(tariffs_data.keys()))
async def no_sub_choose_tariff(callback: CallbackQuery, state: FSMContext):
    print(f"[no_sub_choose_tariff] User: {callback.from_user.id}, tariff chosen: {callback.data}")
    await state.update_data(tariff=callback.data)
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
        reply_markup=await inline_device()
    )
    await state.set_state(SubscriptionState.no_sub_choose_devices)


# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
@router.callback_query(SubscriptionState.no_sub_choose_devices, F.data.in_(['1_devices', '2_devices', '3_devices', '5_devices']))
async def no_sub_choose_device(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tariff = data.get("tariff")
    limit_ip_str = callback.data

    print(f"[no_sub_choose_device] User: {callback.from_user.id}, tariff from state: {tariff}, limit_ip_str chosen: {limit_ip_str}")

    tariff_info = tariffs_data[tariff][limit_ip_str]
    days = tariff_info["days"]
    price = tariff_info["price"]
    limit_ip_int = tariff_info["device_limit"]

    print(f"[no_sub_choose_device] Calculated days: {days}, price: {price}, limit_ip_int: {limit_ip_int}")

    await state.update_data(tariff=tariff, limit_ip_int=limit_ip_int, days=days, price=price)

    telegram_id = callback.from_user.id
    confirmation_url, payment_id = await create_payment(
        user_id=telegram_id,
        tariff_date=days,
        price=price,
        quantity_devices=limit_ip_int
    )
    print(f"[choose_device] Payment created with ID: {payment_id}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)]
        ]
    )

    await callback.message.edit_text(
        text=f"<b>üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!\n\nüí∞–°—É–º–º–∞: {price}‚ÇΩ\nüì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {limit_ip_int}\nüìÖ –î–Ω–µ–π: {days}</b>\n\n"
             f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –±–æ—Ç —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await asyncio.create_task(
        background_check_payment(
            bot=callback.bot,
            telegram_id=telegram_id,
            payment_id=payment_id,
            path="no_subscription",
            days=days,
            device_limit=limit_ip_int,
            state=state
        )
    )


# ============================================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É—Ç–∏ "expired"
# ============================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@router.callback_query(SubscriptionState.expired_choose_tariff, F.data.in_(tariffs_data.keys()))
async def expired_choose_tariff(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    # data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –ë–î
    limit_ip_int = await get_limit_device(telegram_id)
    if not limit_ip_int:
        await callback.message.answer("‚ùå –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å "
                                      "–¥–∞–Ω–Ω—ã–µ (–ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤) –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ.\n"
                                      "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    tariff = callback.data
    days = tariffs_data[tariff][f"{limit_ip_int}_devices"]["days"]
    price = tariffs_data[tariff][f"{limit_ip_int}_devices"]["price"]
    # device_limit = tariffs_data[tariff][f"{limit_device}_devices"]["device_limit"]

    await state.update_data(tariff=tariff, limit_ip=f"{limit_device}_devices")
    print(tariff, f"{limit_device}_devices")

    confirmation_url, payment_id = await create_payment(
        user_id=telegram_id,
        tariff_date=days,
        price=price,
        quantity_devices=limit_device
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥–û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)]
        ]
    )

    await callback.message.edit_text(
        text=f"<b>üí≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ!\n\nüí∞–°—É–º–º–∞: {price}‚ÇΩ\nüì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {limit_device}\nüìÖ –î–Ω–µ–π: {days}</b>\n\n"
             f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî –±–æ—Ç —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await asyncio.create_task(
        background_check_payment(
            bot=callback.bot,
            telegram_id=telegram_id,
            payment_id=payment_id,
            path="expired",
            days=days,
            device_limit=limit_device,
            state=state
        )
    )


# ============================================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É—Ç–∏ "active"
# ============================================

# 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
@router.callback_query(SubscriptionState.active_choose_action, F.data.in_(["active_extend", "active_change_devices"]))
async def active_choose_action(callback: CallbackQuery, state: FSMContext):
    action = callback.data
    await state.update_data(action=action)

    if action == "active_extend":
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=await inline_price()
        )
        await state.set_state(SubscriptionState.active_choose_tariff)

    elif action == "active_change_devices":
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
            reply_markup=await inline_device()
        )
        await state.set_state(SubscriptionState.active_choose_devices)


# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(SubscriptionState.active_choose_tariff)
async def active_choose_tariff(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    tariff = callback.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "month", "three_months" –∏ —Ç.–¥.
    await state.update_data(tariff=tariff)

    data = await state.get_data()
    print("üîß FSM –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞:", data)

    tariff_data = tariffs_data.get(tariff)
    if not tariff_data:
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –±–∞–∑—ã
    current_limit_device = await get_limit_device(telegram_id)
    price = tariff_data[f'{current_limit_device}_devices']["price"]
    days = tariff_data[f'{current_limit_device}_devices']["days"]
    await state.update_data(limit_ip_int=current_limit_device, days=days, price=price)

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
    confirmation_url, payment_id = await create_payment(
        user_id=telegram_id,
        tariff_date=days,
        price=price,
        quantity_devices=current_limit_device
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)]
        ]
    )

    await callback.message.edit_text(
        text=(
            f"<b>üí≥ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üí∞ –°—É–º–º–∞: {price}‚ÇΩ\n"
            f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {current_limit_device}\n"
            f"üìÖ –î–Ω–µ–π: {days}</b>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚Äî "
            "–±–æ—Ç —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."
        ),
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await asyncio.create_task(
        background_check_payment(
            bot=callback.bot,
            telegram_id=telegram_id,
            payment_id=payment_id,
            path="active",
            action="active_extend",
            days=days,
            device_limit=current_limit_device,
            state=state
        )
    )


# 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞—è
@router.callback_query(SubscriptionState.active_choose_devices)
async def active_choose_devices(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    selected_devices = int(callback.data.split("_")[0])
    current_user_limit_ip = await get_limit_device(telegram_id)

    subscription = await get_date_user(telegram_id)
    if not subscription:
        await callback.message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    created_at, deleted_at = subscription

    if not deleted_at:
        await callback.message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                                      "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
        return

    if selected_devices == current_user_limit_ip:
        await callback.answer(text="‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.", show_alert=True)
        return

    if selected_devices < current_user_limit_ip:
        server_id, client_uuid, ip_limit = await get_user_data_for_extend(telegram_id)
        expiry_timestamp = int(deleted_at.timestamp() * 1000)
        # –£–º–µ–Ω—å—à–∞–µ–º –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        await extend_time_key(telegram_id=telegram_id,
                          server_id_name=server_id,
                          client_uuid=client_uuid,
                          limit_ip=selected_devices+1, # +1 —á—Ç–æ–±—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è –∫–ª—é—á
                          expiry_time=expiry_timestamp
        )
        dell = current_user_limit_ip - selected_devices
        await delete_user_db_on_server(dell, server_id, telegram_id)
        await save_ip_limit(telegram_id, selected_devices)
        await callback.message.delete()
        await callback.message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–µ–Ω—å—à–µ–Ω–æ —Å {current_user_limit_ip} –¥–æ {selected_devices}.\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {deleted_at.date()}."
        )
        await state.clear()
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ‚Äî —Å—á–∏—Ç–∞–µ–º –¥–æ–ø–ª–∞—Ç—É
    added_devices = selected_devices - current_user_limit_ip
    days_remaining = (deleted_at - datetime.now()).days
    if days_remaining <= 0:
        await callback.message.answer("‚ùå –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –∏—Å—Ç—ë–∫. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.")
        await state.clear()
        return

    price = added_devices * days_remaining * 6

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
    confirmation_url, payment_id = await create_payment(
        user_id=telegram_id,
        tariff_date=0,
        price=price,
        quantity_devices=selected_devices
    )
    await state.update_data(limit_ip=selected_devices, payment_id=payment_id, added_devices=added_devices)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=confirmation_url)]]
    )

    await callback.message.edit_text(
        text=f"<b>üí≥ –ü–ª–∞—Ç—ë–∂ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
             f"üì± –ë—ã–ª–æ: {current_user_limit_ip} ‚Üí –ë—É–¥–µ—Ç: {selected_devices}\n"
             f"üïí –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {days_remaining}\n"
             f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {selected_devices - current_user_limit_ip}\n"
             f"üßÆ –†–∞—Å—Å—á—ë—Ç –¥–æ–ø–ª–∞—Ç—ã: {days_remaining} * {selected_devices - current_user_limit_ip} * 6 ‚ÇΩ\n\n"
             f"üí∞ –î–æ–ø–ª–∞—Ç–∞: {price}‚ÇΩ\n\n"
             f"‚ùï –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 6 ‚ÇΩ –∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –¥–µ–Ω—å.\n"
             f"‚ùï –î–æ–ø–ª–∞—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
             f"‚ùï –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    # –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    await asyncio.create_task(
        background_check_payment(
            bot=callback.bot,
            telegram_id=telegram_id,
            payment_id=payment_id,
            path="active",
            action="active_change_devices",
            device_limit=selected_devices,
            state=state
        )
    )


# ============================================
# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã
# ============================================

@router.callback_query(F.data.startswith("serverchange_"))
async def server_change(callback: CallbackQuery):
    """
    –°–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞
    # 1. –ü–æ–ª—É—á–∞–µ–º server_id –∏ client_uuid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    # 2. –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ country_code
    # 3. –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä (—Å–∫—Ä–∏–ø—Ç –Ω–∞ –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ -> –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π server_id)
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –µ–≥–æ –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —Å—Ä–æ–∫–æ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏ ip_limit)
    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π key –∏–∑ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    # 6. –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Å–æ–∑–¥–∞–Ω—ã –∏ –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    # 7. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ (server_id, key)
    """
    country_code = callback.data.split("serverchange_")[1]
    telegram_id = callback.from_user.id

    # 1.
    client_data = await get_data_for_delet_client(telegram_id)
    if not client_data:
        await callback.answer(
            text="‚ö†Ô∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n"
                 "‚ùóÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            show_alert=True
        )
        return None

    old_server_id, old_client_uuid, ip_limit = client_data

    # 2.
    # 3.
    new_server_id = await get_least_loaded_server_by_code(
        name_country=country_code,
        current_server_id=old_server_id
    )
    if new_server_id is None:
        await callback.answer(
            text="‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É.",
            show_alert=True
        )
        return None

    await callback.message.delete()

    loading_msg = await callback.bot.send_message(
        chat_id=telegram_id,
        text="‚è≥ –°–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    )

    new_session_3x = None
    old_session_3x = None

    try:
        # 4.
        datetime_user = await get_date_user(telegram_id)

        if not datetime_user:
            await loading_msg.delete()
            await callback.answer(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –¥–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞.",
                show_alert=False
            )
            return None

        _, deleted_at = datetime_user
        new_session_3x = await login_with_credentials(server_name=new_server_id)

        if not new_session_3x:
            await loading_msg.delete()
            await callback.answer(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n",
                show_alert=False
            )
            await notify_admin(f"‚ö†Ô∏è –ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä - {new_server_id}\n"
                               f"‚ö†Ô∏è –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞!")
            return None

        new_client_uuid = str(uuid.uuid4())
        deleted_at_unix_ms = int(deleted_at.timestamp() * 1000)

        await add_user(
            session=new_session_3x,
            server_id_name=new_server_id,
            client_uuid=new_client_uuid,
            telegram_id=str(telegram_id),
            limit_ip=ip_limit,
            total_gb=0,
            expiry_time=deleted_at_unix_ms,
            enable=True,
            flow='xtls-rprx-vision'
        )

        response = await get_clients(new_session_3x, new_server_id)
        if 'obj' not in response or len(response['obj']) == 0:
            await loading_msg.delete()
            await callback.answer(
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ\n"
                     "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                show_alert=False
            )
            return None

        link_data = await link(new_session_3x, new_server_id, new_client_uuid, str(telegram_id))
        if not link_data:
            await loading_msg.delete()
            await callback.answer(text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –µ–µ –ø–æ–ª—É—á–µ–Ω–∏—è!")
            await notify_admin(text=f"–ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ c {old_server_id} –Ω–∞ - {new_server_id}"
                                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {telegram_id} –Ω–µ –≤—ã–¥–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
            return None
        else:
            await save_key_to_database(
                telegram_id=telegram_id,
                client_uuid=new_client_uuid,
                active_key=link_data,
                ip_limit=ip_limit,
                server_id=new_server_id
            )

            await add_user_db_on_server(
                quantity_users=ip_limit,
                server_name=new_server_id,
                telegram_id=telegram_id
            )

        # 5.
        try:
            await callback.bot.send_message(
                chat_id=telegram_id,
                text=f"üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
            )
            await callback.bot.send_message(
                chat_id=telegram_id,
                text=f"<pre>{link_data}</pre>",
                parse_mode='HTML'
            )
        except Exception as e:
            await loading_msg.delete()
            await notify_admin(text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–∫–ª—é—á) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {telegram_id}, –æ—à–∏–±–∫–∞: {e}")
            await callback.answer(
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –°–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                show_alert=False
            )
            return None

        # 6. –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # 7.
        old_session_3x = await login_with_credentials(server_name=old_server_id)
        if not old_session_3x:
            await notify_admin(text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞."
                                    f"‚ö†Ô∏è –ü—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {telegram_id} –Ω–µ –±—ã–ª\n"
                                    f"—É–¥–∞–ª–µ–Ω —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ - {old_server_id}\n"
                                    f"‚ö†Ô∏è –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ - {old_server_id}\n"
                                    f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ - {ip_limit}"
                                    f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–±–ª–∏—Ü–∞ traffic_data, —Å—Ç–æ–ª–±–µ—Ü quantity_users")
        else:
            await delete_client(
                session=old_session_3x,
                server_id_name=old_server_id,
                client_id=old_client_uuid
            )

            await delete_user_db_on_server(
                quantity_users=ip_limit,
                server_name=old_server_id,
                telegram_id=telegram_id
            )

        await notify_admin(text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {telegram_id} "
                                f"—É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä —Å {old_server_id} –Ω–∞ {new_server_id}")

    except Exception as e:
        await notify_admin(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}\n"
                           f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–µ—Ä: {old_server_id}\n"
                           f"‚ö†Ô∏è –ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: {new_server_id}\n"
                           f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}\n"
                           )
        await callback.answer(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–∂–µ.",
            show_alert=False
        )
        return None

    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await loading_msg.delete()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await callback.answer()
        if 'new_session_3x' in locals() and new_session_3x:
            await new_session_3x.close()

        if 'old_session_3x' in locals() and old_session_3x:
            await old_session_3x.close()
    return None


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@router.callback_query(lambda query: query.data == 'trial')
async def trial_button_callback_handler(query: CallbackQuery):
    await trial_button_callback(query)


async def trial_button_callback(query: CallbackQuery):
    telegram_id = query.from_user.id
    server_id_name = None
    try:
        trial_used = await check_used_trial_period(telegram_id=telegram_id)
        if trial_used:
            await query.answer(text="‚ùó–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                               replay_markup=await main_menu_keyboard(),
                               show_alert=True)
            return None

        sub_status, _ = await get_user_subscription_status(telegram_id=telegram_id)
        if sub_status != "no_subscription":
            await query.answer(text="‚ùó–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.",
                               reply_markup=await main_menu_keyboard(),
                               show_alert=True)
            return None

        key_data = await create_trial_key(telegram_id)

        if not key_data:
            await query.bot.send_message(
                chat_id=telegram_id,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                reply_markup=await main_menu_keyboard()
            )
            return None

        connect_link, client_uuid, limit_ip, server_id_name, expiry_time = key_data

        await save_key_to_database(telegram_id=telegram_id,
                                    client_uuid=client_uuid,
                                    active_key=connect_link,
                                    ip_limit=limit_ip,
                                    server_id=server_id_name,
                                    expiry_time=expiry_time
                                    )

        await add_user_db_on_server(limit_ip, server_id_name, telegram_id)

        await query.answer(text="‚è≥–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞...")
        await query.bot.send_message(chat_id=telegram_id, text="üîë–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: üëáüèª")

        await query.bot.send_message(chat_id=telegram_id,
                                     text=f"<pre>{connect_link}</pre>",
                                     reply_markup=await main_menu_keyboard(),
                                     parse_mode="HTML")

        await query.bot.send_message(chat_id=telegram_id,
                                     text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:",
                                     reply_markup=await choosing_a_device()
                                     )

        await add_user_trial_period(telegram_id=telegram_id)


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ trial_button_callback: {e}\n telegram_id: {telegram_id}\n server_id: {server_id_name}")
        await query.bot.send_message(chat_id=telegram_id,
                                     text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                                     reply_markup=await main_menu_keyboard())



@router.callback_query(F.data.in_(['iphone', 'android', 'windows', 'macos']))
async def show_instruction(callback_query: CallbackQuery):
    try:
        callback_data = callback_query.data
        instruction_texts = {
            'iphone': "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è üçè<b>iPhone:</b> \n\n"
                     "<b>1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>\n\n"
                     "<b>2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> üåê<a href='https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690'>V2Box</a>.\n\n"
                     "<b>3.</b> –û—Ç–∫—Ä–æ–π—Ç–µ <b>V2Box.</b>\n\n"
                     "<b>4.</b> –ü–µ—Ä–µ–π–¥–∏—Ç–µ —Å–Ω–∏–∑—É –≤ —Ä–∞–∑–¥–µ–ª <b>''Configs''</b>, –Ω–∞–∂–º–∏—Ç–µ ''+'' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <b>''–í—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'' / ''Import v2ray uri from clipboard''.</b>\n\n"
                     "<b>5.</b> –í —Ä–∞–∑–¥–µ–ª–µ <b>''Configs''</b> –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª—é—á, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>''Home''</b> –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n",

            # 'iphone': "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è üçè<b>iPhone:</b> \n\n"
            #         "<b>1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>\n\n"
            #         "<b>2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> üåê<a href='https://apps.apple.com/ru/app/v2raytun/id6476628951'>V2RayTun</a> (–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ App Store).\n\n"
            #         "<b>3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ V2RayTun</b> –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ ''+'' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.\n\n"
            #         "<b>4. –ù–∞–∂–º–∏—Ç–µ ''–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞''</b> –∏ –∑–∞—Ç–µ–º <b>''–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å—Ç–∞–≤–∫—É''.</b>\n\n"
            #          "<b>5. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é</b> –∏ –Ω–∞–∂–º–∏—Ç–µ <b>''–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è''</b> –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n\n",

            'android': "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è ü§ñ<b>Android:</b> \n\n" 
                    "<b>1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>\n\n"
                    "<b>2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> üåê<a href='https://play.google.com/store/search?q=hiddifyNG&c=apps'>HiddifyNG</a>.\n\n"
                    "<b>3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ HiddifyNG</b> –∏ –Ω–∞–∂–º–∏—Ç–µ <b>''Import from clipboard''</b>, –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.\n\n"
                    "<b>4.</b> –ù–∞–∂–º–∏—Ç–µ <b>''Click to connect''</b> –∏ –∑–∞—Ç–µ–º <b>''Ok''.</b>\n\n",

            'windows': "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è üñ•<b>Windows:</b> \n\n"
                    "<b>1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>\n\n"
                    "<b>2.</b> –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåê<a href='https://github.com/hiddify/hiddify-next/releases/download/v2.5.7/Hiddify-Windows-Setup-x64.exe'>Hiddify</a>üëàüèª <b>–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</b>\n\n"
                    "<b>3.</b> –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª Hiddify <b>–æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n\n"
                    "<b>4.</b> –ù–∞–∂–º–∏—Ç–µ <b>''–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å''</b> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞.\n\n"
                    "<b>5.</b> –í –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, <b>–æ—Ç–∫—Ä–æ–π—Ç–µ –∏—Ö</b> –∏ <b>–Ω–∞–∂–º–∏—Ç–µ VPN.</b>\n\n",

            'macos': "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è üíª<b>MacOS:</b> \n\n"
                    "<b>1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>\n\n"
                    "<b>2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> üåê<a href='https://apps.apple.com/ru/app/v2box-v2ray-client/id6446814690'>V2Box</a>.\n\n"
                    "<b>3.</b> –û—Ç–∫—Ä–æ–π—Ç–µ <b>V2Box.</b>\n\n"
                    "<b>4.</b> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>''Configs''</b>, –Ω–∞–∂–º–∏—Ç–µ ''+'' –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ <b>''–í—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'' / ''Import v2ray uri from clipboard''.</b>\n\n"
                    "<b>5.</b> –í —Ä–∞–∑–¥–µ–ª–µ <b>''Configs''</b> –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª—é—á, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>''Home''</b> –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
        }

        if callback_data in instruction_texts:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                          callback_data='return_to_instruction_choice')]
                ]
            )
            await callback_query.message.edit_text(
                text=instruction_texts[callback_data],
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=keyboard
            )
            await callback_query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_instruction: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")


@router.callback_query(F.data == 'return_to_instruction_choice')
async def return_to_instruction_choice_callback(query: CallbackQuery):
    try:
        keyboard = await choosing_a_device()
        if keyboard is None:
            await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await query.message.edit_text(
            text="üìå –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á:",
            reply_markup=keyboard
        )
        await query.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ return_to_instruction_choice_callback: {e}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")


