from aiogram import types, Router, F
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext

from os import path
from data.loader import bot

from database.functions_db_async import *

from datetime import datetime

from keyboard.user_keyboard import *

from handlers.states import SubscriptionState



router = Router()


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
commands = [
    BotCommand(command="/start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    BotCommand(command="/tariffs", description="üìä –¢–∞—Ä–∏—Ñ—ã"),
    BotCommand(command="/pay", description="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
    BotCommand(command="/my_id", description="üÜî –ü—Ä–æ—Ñ–∏–ª—è"),
    BotCommand(command="/support", description="üÜò –ü–æ–º–æ—â—å"),
]

async def set_commands():
    await bot.set_my_commands(commands=commands)


# ______________________________________________________________________________________________________
@router.message(Command("pay"))
async def pay_sub(msg: Message, state: FSMContext):
    await buy_subscription(msg, state)


@router.message(Command("support"))
async def helping(msg: Message):
    await help_section(msg)


@router.message(Command("my_id"))
async def show_my_id(msg: Message):
    telegram_id = msg.from_user.id
    await msg.answer(text=f"üÜî –ü—Ä–æ—Ñ–∏–ª—è: {telegram_id}")


@router.message(Command("tariffs"))
async def show_tariffs(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="pay_subscribe")],
        ]
    )

    text = (
        f"<b>üìä –¢–∞—Ä–∏—Ñ—ã:</b>\n\n"
        f"üü¢ <b>1 –º–µ—Å—è—Ü</b> ‚Äî "
        f"{tariffs_data['month']['1_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['month']['2_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['month']['3_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['month']['5_devices']['price']}‚ÇΩ\n"
        "(1 / 2 / 3 / 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n\n"

        f"üîµ <b>3 –º–µ—Å—è—Ü–∞</b> ‚Äî "
        f"{tariffs_data['three_months']['1_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['three_months']['2_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['three_months']['3_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['three_months']['5_devices']['price']}‚ÇΩ\n"
        "(1 / 2 / 3 / 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n\n"

        f"üü† <b>6 –º–µ—Å—è—Ü–µ–≤</b> ‚Äî "
        f"{tariffs_data['six_months']['1_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['six_months']['2_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['six_months']['3_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['six_months']['5_devices']['price']}‚ÇΩ\n"
        "(1 / 2 / 3 / 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n\n"

        f"üî¥ <b>12 –º–µ—Å—è—Ü–µ–≤</b> ‚Äî "
        f"{tariffs_data['year']['1_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['year']['2_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['year']['3_devices']['price']}‚ÇΩ / "
        f"{tariffs_data['year']['5_devices']['price']}‚ÇΩ\n"
        "(1 / 2 / 3 / 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n\n"

        "<b>üéÅ –ü–æ–ª—É—á–∞–π—Ç–µ —Å–∫–∏–¥–∫–∏ –æ—Ç 7% –¥–æ 25% ‚Äî —á–µ–º –±–æ–ª—å—à–µ –≤—ã–±–∏—Ä–∞–µ—Ç–µ, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ!</b>"
    )
    await message.answer(text=text, reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data == "show_tariffs")
async def callback_show_tariffs(callback: types.CallbackQuery):
    await show_tariffs(callback.message)
    await callback.answer()



@router.callback_query(F.data == "pay_subscribe")
async def transition_to_payment(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å –æ–ø–ª–∞—Ç–æ–π –ø–æ–¥ —Ç–∞—Ä–∏—Ñ–∞–º–∏: {e}")

    await handle_buy_subscription(callback.from_user.id, callback.message, state)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@router.message(Command('start'))
async def start_func(msg: Message):
    telegram_id = msg.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_registered(telegram_id):
        await register_user(telegram_id)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

        keyboard_show_tariffs = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóÇÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="show_tariffs"), (InlineKeyboardButton(text="üéÅ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial"))]])

        await msg.answer_photo(
            photo=types.FSInputFile(path.join('images', 'logo.jpg')),
            caption=(
                'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *MVPNet*üåê‚ú®\n\n'
                '–ù–∞—à —Å–µ—Ä–≤–µ—Ä \\- –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–µ—Ä–≤–µ—Ä\\. –≠—Ç–æ —É–º–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–π –º–æ–±–∏–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ\\! *–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å* –≤ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫\\!\n\n'
                '> üí∞üí∞–ó–∞ 199 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–º–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ —É –≤–∞—Å —á—Ç–æ\\-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, –º—ã –ø–æ–º–æ–∂–µ–º –∏ –æ–±—ä—è—Å–Ω–∏–º, –ø–æ—á–µ–º—É –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\\!\n\n'
                '–ë–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –º—ã —Å–º–æ–∂–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\\! *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å*\\!\n\n'
            ), parse_mode="MarkdownV2",
            reply_markup=keyboard_show_tariffs
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é remaining_days
        await remaining_days(msg)
        keyboard = await main_menu_keyboard()
        await msg.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é: üëáüèº", reply_markup=keyboard)



# ______________________________________________________________________________________________________


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π"
@router.message(F.text == "üìÜ–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π")
async def remaining_days(msg: Message):
    name_client = msg.from_user.first_name
    telegram_id = msg.from_user.id

    deleted_at = await check_date_subscribe(telegram_id)
    limit_ip = await get_limit_device(telegram_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="pay_subscribe")],
        ]
    )


    if deleted_at is None:
        await msg.answer(text=f'üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> {name_client}\n'
                              f'____________________\n\n\n'
                              f'‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.', parse_mode='HTML', reply_markup=keyboard)


    else:
        try:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscribe")]
                ]
            )

            now = datetime.now()
            formatted_date = deleted_at.strftime('%d.%m.%Y, %H:%M:%S')

            if deleted_at < now:
                # –°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—à—ë–ª
                await msg.answer(
                    text=f'üë§ –ü—Ä–æ—Ñ–∏–ª—å: <b>{name_client}</b>\n'
                    f'____________________\n\n'
                    f'‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞: <b>{formatted_date}</b> –ú—Å–∫.',
                    parse_mode='HTML', reply_markup=keyboard
                )
            else:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
                active_status = '‚úÖ'
                delta = deleted_at - now
                days_left = delta.days
                hours_left = delta.seconds // 3600
                minutes_left = delta.seconds % 3600 // 60
                await msg.answer(
                    text=f'üë§ –ü—Ä–æ—Ñ–∏–ª—å: <b>{name_client}</b>\n'
                    f'____________________\n\n'
                    f'üí°Active: {active_status}\n'
                    f'üì±–ö–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {limit_ip}\n'
                    f'‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>| {days_left} –¥–Ω. | {hours_left} —á. | {minutes_left} –º. |</b>\n'
                    f'üìÖ–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <b>{formatted_date} –ú–°–ö</b>', parse_mode='HTML'
                )


        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")



        @router.callback_query(F.data == "extend_the_subscription")
        async def from_profile_to_subscription(callback: CallbackQuery, state: FSMContext):
            await callback.answer()
            await callback.message.delete()
            await buy_subscription(callback.message, state)

# ______________________________________________________________________________________________________


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –∫–ª—é—á"
@router.message(F.text == "‚öôÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ üîë –ö–ª—é—á")
async def instruction_key(msg: Message, state: FSMContext):
    telegram_id = msg.from_user.id
    await state.clear()
    deleted_at = await check_date_subscribe(telegram_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

    if deleted_at is None:
        await msg.answer(text="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    now = datetime.now()
    if deleted_at < now:
        formatted_date = deleted_at.strftime('%d.%m.%Y, %H:%M:%S')
        await msg.answer(text=f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞: <b>{formatted_date}</b> –ú—Å–∫.", parse_mode='HTML')
        return

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    active_key = await get_key(telegram_id=telegram_id)
    if active_key is None:
        await msg.answer(text="‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
    else:
        await msg.answer(text="üîë–ö–ª—é—á: üëáüèª")
        await msg.answer(text=f"<pre>{active_key}</pre>", parse_mode="HTML")
        await msg.answer(text="üìå –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á:", reply_markup=await choosing_a_device())
        await msg.answer(text=f"‚ö†Ô∏è<b>–ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –∫–ª—é—á–æ–º.</b> –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π!\n", parse_mode='HTML')



# ______________________________________________________________________________________________________

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
# @router.message(F.text == "üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
# async def buy_subscription(msg: Message, state: FSMContext):


@router.message(F.text == "üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(msg: Message, state: FSMContext):
    await handle_buy_subscription(msg.from_user.id, msg, state)
    return


async def handle_buy_subscription(user_id: int, msg: Message, state: FSMContext):

    await state.clear()
    status, subscription = await get_user_subscription_status(user_id)

    if status == 'no_subscription':
        await msg.answer(
            text="<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.</b>\n\n"
                 "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=await inline_price(),
            parse_mode='HTML'
        )
        await state.set_state(SubscriptionState.no_sub_choose_tariff)

    elif status == 'expired':
        await msg.answer(text="<b>‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.</b>\n\n"
                              "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>",
            reply_markup=await inline_price(),
            parse_mode='HTML'
        )
        await state.set_state(SubscriptionState.expired_choose_tariff)


    elif status == 'active':
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="active_extend"),
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data="active_change_devices"),
            ]
        ])

        await msg.answer(
            text="<b>‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.</b>\n\n"
                 "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: <pre>–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ.</pre>\n\n"
                 "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: <pre>—Å–º–µ–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏,"
                 "–ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏.</pre>\n\n"
                 "<b><u>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</u></b>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await state.set_state(SubscriptionState.active_choose_action)


# ______________________________________________________________________________________________________

#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
# @router.message(F.text == "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
# async def referral_system(msg: Message):
#     await msg.answer("üì¢ –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


# ______________________________________________________________________________________________________


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
@router.message(F.text == "üåç–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
async def change_server(msg: Message, state: FSMContext):
    telegram_id = msg.from_user.id
    await state.clear()
    status, _ = await get_user_subscription_status(telegram_id=telegram_id)

    if status in ('no_subscription', 'expired'):
        await msg.answer(text="üö´ –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.")
        return

    await msg.answer(
        text="<b>üí° –í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
             "<pre>–°–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤—ã–¥–∞—á–∏ –Ω–æ–≤–æ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ.</pre>\n\n"
             "üîÑ–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é.</b>\n"
             "‚öôÔ∏è–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n"
             "<b><u>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:</u></b>",
        reply_markup=await inline_server_change(),
        parse_mode='HTML'
    )


# ______________________________________________________________________________________________________


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–º–æ–∫–æ–¥"
# @router.message(F.text == "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥")
# async def promo_code(msg: Message):
#     await msg.answer("üéÅ –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


# ______________________________________________________________________________________________________


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def help_section(msg: Message):
    await msg.answer(
        "üìå –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n\n"
        "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –æ–±—â–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏ üîç.\n\n"
        "–ï—Å–ª–∏ –∂–µ –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É –≤–∞—Å –æ—Å—Ç–∞—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üí¨üëç\n\n"
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º —Å –í–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º: (–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏)"
    )


# ______________________________________________________________________________________________________